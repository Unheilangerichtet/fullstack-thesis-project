const { spawn } = require('child_process');
const path = require('path');
const grammarUtils = require('../utils/grammarUtils');

exports.runChildProcess = (word, productions, startSymbol) => {
  return new Promise((resolve, reject) => {
    const scripts = {
      win32: 'CP-withP-Mark1.exe',
      darwin: 'CP-compiled-on-Mac',
      linux: 'cp-wP-linux',
    };
    const fallbackScripts = [scripts.win32, scripts.linux, scripts.darwin];
    const grammarJSON = grammarUtils.formatGrammar(productions, startSymbol);
    tryNextScript(fallbackScripts, 0, word, grammarJSON, resolve, reject);
  });
};

function tryNextScript(scripts, index, word, grammarJSON, resolve, reject) {
  if (index >= scripts.length) {
    return reject('All scripts failed to execute.');
  }
  const script = scripts[index];
  const goExecutable = path.join(__dirname, `../executables/${script}`);
  
  console.log(`Attempting to run ${script}...`);

  const goProcess = spawn(goExecutable, [grammarJSON, word]);

  let result = '';

  goProcess.stdout.on('data', (data) => {
    result += data.toString();
  });
  goProcess.stderr.on('data', (data) => {
    console.error(`Go stderr: ${data}`);
  });
  goProcess.on('error', (err) => {
    console.error(`Failed to start subprocess with ${script}: ${err.message}`);
    tryNextScript(scripts, index + 1, word, grammarJSON, resolve, reject);
  });
  goProcess.on('close', (code) => {
    if (code !== 0) {
      console.error(`Go process with ${script} exited with code ${code}`);
      tryNextScript(scripts, index + 1, word, grammarJSON, resolve, reject);
    } else {
      resolve(result.trim());
    }
  });
}
